---
import Layout from '../../layouts/Layout.astro';
import fs from 'fs';
import path from 'path';

// 静态路径生成函数
export async function getStaticPaths() {
  const galleryBasePath = path.join(process.cwd(), 'public', 'gallery');
  const dirs = [];
  
  try {
    const entries = fs.readdirSync(galleryBasePath, { withFileTypes: true });
    for (const entry of entries) {
      if (entry.isDirectory()) {
        dirs.push({
          params: { dir: entry.name }
        });
      }
    }
  } catch (error) {
    console.warn('无法读取 gallery 目录:', error);
  }
  
  return dirs;
}

const { dir } = Astro.params;

if (!dir) {
  return Astro.redirect('/');
}

// 在构建时读取图片和文字数据
const galleryDir = path.join(process.cwd(), 'public', 'gallery', dir);

if (!fs.existsSync(galleryDir)) {
  return Astro.redirect('/');
}

// 获取图片列表
const images = [];
const files = fs.readdirSync(galleryDir);

for (const file of files) {
  if (/\.(jpg|jpeg|png|gif|webp)$/i.test(file)) {
    images.push(file);
  }
}

// 获取随机文字
const lines = [];
const linesFile = path.join(galleryDir, 'lines.txt');

if (fs.existsSync(linesFile)) {
  const content = fs.readFileSync(linesFile, 'utf-8');
  lines.push(...content.split('\n').filter(line => line.trim()));
}

// 如果没有文字，使用默认文字
if (lines.length === 0) {
  lines.push('这是一张美丽的图片', '欣赏这美好的时刻', '留下难忘的回忆');
}

// 为每个图片随机分配一行文字
const imageData = images.map(image => ({
  file: `/gallery/${dir}/${image}`,
  text: lines[Math.floor(Math.random() * lines.length)]
}));
---

<Layout title={`${dir} - 图片轮播`}>
  <main class="slideshow-container">
    {imageData.length === 0 ? (
      <div class="empty-gallery">
        📸 该目录下暂无图片
        <br/>
        <a href="/" class="back-button" style="margin-top: 20px; display: inline-block;">返回画廊列表</a>
      </div>
    ) : (
      <div class="slideshow-wrapper" id="slideshow-wrapper">
        <div class="slide-counter">
          <span id="current-slide">1</span> / {imageData.length}
        </div>
        
        {imageData.map((data, index) => (
          <div class={`slide ${index === 0 ? 'active' : ''}`} data-slide={index + 1}>
            <img src={data.file} alt={`图片 ${index + 1}`} />
            <div class="slide-caption">{data.text}</div>
          </div>
        ))}
        
        <button class="navigation prev" id="prev-btn">❮</button>
        <button class="navigation next" id="next-btn">❯</button>
      </div>
      
      <div class="dots-container">
        {imageData.map((_, index) => (
          <span class={`dot ${index === 0 ? 'active' : ''}`} data-slide={index + 1}></span>
        ))}
      </div>
      
      <div class="controls">
        <div class="time-control">
          <label for="interval-select">切换时间:</label>
          <select id="interval-select">
            <option value="3000">3秒</option>
            <option value="5000">5秒</option>
            <option value="10000" selected>10秒</option>
            <option value="15000">15秒</option>
            <option value="30000">30秒</option>
            <option value="60000">60秒</option>
          </select>
        </div>
        
        <a href="/" class="back-button">← 返回画廊列表</a>
      </div>
    )}
  </main>
  
  <script define:vars={{ imageData }} >
    let slideIndex = 1;
    let autoSlideInterval;
    let slideInterval = 10000;
    let isFullscreen = false;
    
    function showSlide(n) {
      const slides = document.querySelectorAll('.slide');
      const dots = document.querySelectorAll('.dot');
      const currentSlideElement = document.getElementById('current-slide');
      
      if (n > slides.length) { slideIndex = 1; }
      if (n < 1) { slideIndex = slides.length; }
      
      slides.forEach(slide => slide.classList.remove('active'));
      dots.forEach(dot => dot.classList.remove('active'));
      
      if (slides[slideIndex - 1]) {
        slides[slideIndex - 1].classList.add('active');
      }
      
      if (dots[slideIndex - 1]) {
        dots[slideIndex - 1].classList.add('active');
      }
      
      if (currentSlideElement) {
        currentSlideElement.textContent = slideIndex;
      }
    }
    
    function changeSlide(n) {
      slideIndex += n;
      showSlide(slideIndex);
      resetAutoSlide();
    }
    
    function currentSlide(n) {
      slideIndex = n;
      showSlide(slideIndex);
      resetAutoSlide();
    }
    
    function startAutoSlide() {
      clearInterval(autoSlideInterval);
      autoSlideInterval = setInterval(() => {
        slideIndex++;
        showSlide(slideIndex);
      }, slideInterval);
    }
    
    function resetAutoSlide() {
      clearInterval(autoSlideInterval);
      startAutoSlide();
    }
    
    function toggleFullscreen() {
      isFullscreen = !isFullscreen;
      const body = document.body;
      
      if (isFullscreen) {
        body.classList.add('fullscreen-mode');
        document.body.style.cursor = 'none';
        
        setTimeout(() => {
          if (isFullscreen) {
            document.body.style.cursor = 'none';
          }
        }, 3000);
      } else {
        body.classList.remove('fullscreen-mode');
        document.body.style.cursor = 'default';
      }
    }
    
    // 初始化
    document.addEventListener('DOMContentLoaded', () => {
      showSlide(slideIndex);
      if (imageData.length > 0) {
        startAutoSlide();
      }
      
      // 绑定导航按钮事件
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      
      if (prevBtn) {
        prevBtn.addEventListener('click', () => changeSlide(-1));
      }
      
      if (nextBtn) {
        nextBtn.addEventListener('click', () => changeSlide(1));
      }
      
      // 绑定圆点事件
      const dots = document.querySelectorAll('.dot');
      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => currentSlide(index + 1));
      });
      
      // 双击切换全屏
      document.addEventListener('dblclick', toggleFullscreen);
      
      // 时间间隔控制
      const intervalSelect = document.getElementById('interval-select');
      if (intervalSelect) {
        intervalSelect.addEventListener('change', function() {
          slideInterval = parseInt(this.value);
          resetAutoSlide();
          
          const notification = document.createElement('div');
          notification.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            z-index: 2000;
            font-size: 16px;
          `;
          notification.textContent = `切换间隔已设置为 ${this.options[this.selectedIndex].text}`;
          document.body.appendChild(notification);
          
          setTimeout(() => {
            document.body.removeChild(notification);
          }, 2000);
        });
      }
      
      // 键盘控制
      document.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowLeft') {
          changeSlide(-1);
        } else if (e.key === 'ArrowRight') {
          changeSlide(1);
        } else if (e.key === ' ') {
          e.preventDefault();
          changeSlide(1);
        } else if (e.key === 'f' || e.key === 'F') {
          toggleFullscreen();
        } else if (e.key === 'Escape' && isFullscreen) {
          toggleFullscreen();
        }
      });
      
      // 鼠标移动时显示鼠标
      document.addEventListener('mousemove', function() {
        if (isFullscreen) {
          document.body.style.cursor = 'default';
          clearTimeout(window.cursorTimeout);
          window.cursorTimeout = setTimeout(() => {
            if (isFullscreen) {
              document.body.style.cursor = 'none';
            }
          }, 3000);
        }
      });
    });
  </script>
</Layout>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family: 'Microsoft YaHei', Arial, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
  
  .slideshow-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 20px;
    max-width: 100%;
    margin: 0 auto;
  }
  
  .slideshow-wrapper {
    position: relative;
    max-width: 800px;
    width: 100%;
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    overflow: hidden;
  }
  
  .slide {
    display: none;
    text-align: center;
  }
  
  .slide.active {
    display: block;
  }
  
  .slide img {
    width: 100%;
    height: 500px;
    object-fit: contain;
    background: #f5f5f5;
  }
  
  .slide-caption {
    padding: 20px;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
    color: white;
    font-size: 1.2em;
    font-style: italic;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
  }
  
  .navigation {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 15px 20px;
    cursor: pointer;
    font-size: 18px;
    transition: background 0.3s ease;
    z-index: 10;
  }
  
  .navigation:hover {
    background: rgba(0, 0, 0, 0.8);
  }
  
  .prev {
    left: 10px;
    border-radius: 0 5px 5px 0;
  }
  
  .next {
    right: 10px;
    border-radius: 5px 0 0 5px;
  }
  
  .dots-container {
    text-align: center;
    padding: 20px;
    background: rgba(255, 255, 255, 0.1);
    margin-top: 20px;
    border-radius: 50px;
  }
  
  .dot {
    height: 12px;
    width: 12px;
    margin: 0 8px;
    background-color: rgba(255, 255, 255, 0.5);
    border-radius: 50%;
    display: inline-block;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .dot.active {
    background-color: white;
    transform: scale(1.2);
  }
  
  .empty-gallery {
    text-align: center;
    color: white;
    font-size: 1.5em;
    margin-top: 50px;
  }
  
  .slide-counter {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 14px;
  }
  
  .controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 20px;
    flex-wrap: wrap;
  }
  
  .time-control {
    display: flex;
    align-items: center;
    gap: 10px;
    background: rgba(255, 255, 255, 0.1);
    padding: 10px 15px;
    border-radius: 25px;
    backdrop-filter: blur(10px);
  }
  
  .time-control label {
    color: white;
    font-size: 14px;
  }
  
  .time-control select {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 15px;
    padding: 5px 10px;
    font-size: 14px;
    cursor: pointer;
  }
  
  .time-control select option {
    background: #333;
    color: white;
  }
  
  .back-button {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
    padding: 10px 20px;
    border-radius: 25px;
    text-decoration: none;
    transition: all 0.3s ease;
  }
  
  .back-button:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-2px);
  }
  
  /* 全屏模式 */
  body.fullscreen-mode {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: white;
    z-index: 1000;
    overflow: hidden;
  }
  
  body.fullscreen-mode .slideshow-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: white;
    padding: 0;
    justify-content: center;
    align-items: center;
  }
  
  body.fullscreen-mode .slideshow-wrapper {
    width: 100vw;
    height: 100vh;
    max-width: none;
    border-radius: 0;
    box-shadow: none;
    background: white;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  
  body.fullscreen-mode .slide {
    height: 100vh;
    display: none;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
  }
  
  body.fullscreen-mode .slide.active {
    display: flex;
  }
  
  body.fullscreen-mode .slide img {
    max-width: 90vw;
    max-height: calc(100vh - 120px);
    width: auto;
    height: auto;
    object-fit: contain;
    background: white;
  }
  
  body.fullscreen-mode .controls,
  body.fullscreen-mode .dots-container,
  body.fullscreen-mode .navigation,
  body.fullscreen-mode .slide-counter {
    display: none !important;
  }
  
  body.fullscreen-mode .slide-caption {
    background: rgba(102, 126, 234, 0.1);
    color: #333;
    padding: 15px 30px;
    font-size: 1.2em;
    font-style: normal;
    text-align: center;
    border-radius: 10px;
    margin: 0 20px;
    max-width: 80vw;
    text-shadow: none;
  }
  
  @media (max-width: 768px) {
    .slideshow-wrapper {
      margin: 10px;
    }
    
    .slide img {
      height: 300px;
    }
  }
</style>